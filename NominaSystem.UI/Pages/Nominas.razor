@page "/nominas"
@using NominaSystem.UI.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Nóminas</h3>

<button class="btn btn-primary mb-2" @onclick="AgregarNomina">Agregar Nómina</button>

@if (nominas == null || !nominas.Any())  //Se asegura de mostrar el mensaje adecuado cuando no haya datos
{
    <p><em>Cargando nóminas...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Empleado</th>
                <th>Período</th>
                <th>Salario Base</th>
                <th>Horas Extras</th>
                <th>Bonificaciones</th>
                <th>Descuento</th>
                <th>Total Pago</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var nom in nominas)
            {
                <tr>
                    <td>@nom.NombreEmpleado</td>
                    <td>@($"{nom.PeriodoInicio?.ToString("yyyy-MM-dd")} - {nom.PeriodoFin?.ToString("yyyy-MM-dd")}")</td>
                    <td>@nom.SalarioBase</td>
                    <td>@nom.HorasExtras</td>
                    <td>@nom.Bonificaciones</td>
                    <td>@nom.Descuentos</td>
                    <td>@nom.TotalPago.ToString("C")</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-1" @onclick="() => EditarNomina(nom.Id)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarNomina(nom.Id)">Eliminar</button>
                        <button class="btn btn-info btn-sm me-1" @onclick="() => VerNomina(nom.Id)">Ver Nomina</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<NominaDto> nominas = new List<NominaDto>();  // Inicializamos como lista vacía

    private async Task CargarNominas()
    {
        try
        {
            var response = await Http.GetAsync("api/Nomina");

            if (response.IsSuccessStatusCode)
            {
                nominas = await response.Content.ReadFromJsonAsync<List<NominaDto>>() ?? new List<NominaDto>();
                Console.WriteLine($"Cantidad de nóminas recibidas: {nominas.Count}");

                // Verificar que el campo NombreEmpleado está siendo correctamente asignado
                foreach (var nom in nominas)
                {
                    Console.WriteLine($"Empleado: {nom.NombreEmpleado}");  // Verificar que se muestra el nombre del empleado
                }
            }
            else
            {
                Console.WriteLine($"Error al obtener nóminas. Código de estado: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener nóminas: {ex.Message}");
        }

        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await CargarNominas();  // Llamar al método al inicializar el componente
    }

    private void AgregarNomina() => Navigation.NavigateTo("/nominas/agregar");
    private void EditarNomina(int id) => Navigation.NavigateTo($"/nominas/editar/{id}");
    private void VerNomina(int id) => Navigation.NavigateTo($"/nominas/{id}");

    private async Task EliminarNomina(int id)
    {
        await Task.Delay(100); // Añadir un pequeño retraso para asegurarse de que Blazor esté listo
        bool confirmar = await JS.InvokeAsync<bool>("confirm", $"¿Deseas eliminar la nómina {id}?");
        if (!confirmar) return;

        var response = await Http.DeleteAsync($"api/Nomina/{id}");
        if (response.IsSuccessStatusCode)
        {
            await CargarNominas();  // Recargar la lista de nóminas después de eliminar
        }
        else
        {
            Console.WriteLine($"Error al eliminar nómina: {response.StatusCode}");
        }
    }
}





