@page "/empleados/agregar"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<h3>Agregar Empleado</h3>

<EditForm Model="nuevoEmpleado" OnValidSubmit="GuardarEmpleado">
    <DataAnnotationsValidator />

    <div class="accordion" id="formAccordion">
        <!-- Sección: Datos Generales -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingGenerales">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGenerales">
                    Datos Generales
                </button>
            </h2>
            <div id="collapseGenerales" class="accordion-collapse collapse show" data-bs-parent="#formAccordion">
                <div class="accordion-body">

                    <div class="mb-3">
                        <label>Nombre:</label>
                        <InputText class="form-control" @bind-Value="nuevoEmpleado.Nombre" />
                        <ValidationMessage For="@(() => nuevoEmpleado.Nombre)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label>DPI:</label>
                        <InputText class="form-control" @bind-Value="nuevoEmpleado.Dpi" />
                        <ValidationMessage For="@(() => nuevoEmpleado.Dpi)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label>Teléfono:</label>
                        <InputText class="form-control" @bind-Value="nuevoEmpleado.Telefono" />
                        <ValidationMessage For="@(() => nuevoEmpleado.Telefono)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label>Estado Laboral:</label>
                        <InputSelect class="form-control" @bind-Value="nuevoEmpleado.EstadoLaboral">
                            <option value="">-- Seleccionar estado --</option>
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => nuevoEmpleado.EstadoLaboral)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label>Dirección:</label>
                        <InputText class="form-control" @bind-Value="nuevoEmpleado.Direccion" />
                        <ValidationMessage For="@(() => nuevoEmpleado.Direccion)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label>Fecha de Ingreso:</label>
                        <InputDate class="form-control" @bind-Value="nuevoEmpleado.FechaIngreso" />
                        <ValidationMessage For="@(() => nuevoEmpleado.FechaIngreso)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label>Cargo:</label>
                        <InputSelect class="form-control" @bind-Value="nuevoEmpleado.Id_Cargo">
                            <option value="">-- Seleccione Cargo --</option>
                            @foreach (var c in cargos)
                            {
                                <option value="@c.Id">@c.NombreCargo</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label>Departamento:</label>
                        <InputSelect class="form-control" @bind-Value="nuevoEmpleado.Id_Departamento">
                            <option value="">-- Seleccione Departamento --</option>
                            @foreach (var d in departamentos)
                            {
                                <option value="@d.Id">@d.NombreDepartamento</option>
                            }
                        </InputSelect>
                    </div>

                </div>
            </div>
        </div>

        <!-- Sección: Documentos -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingDocumentos">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDocumentos">
                    Documentos
                </button>
            </h2>
            <div id="collapseDocumentos" class="accordion-collapse collapse" data-bs-parent="#formAccordion">
                <div class="accordion-body">

                    <div class="mb-3">
                        <label>Nombre del Documento:</label>
                        <InputText class="form-control" @bind-Value="nuevoDocumento.Nombre" />
                    </div>

                    <div class="mb-3">
                        <label>Tipo de Documento:</label>
                        <InputText class="form-control" @bind-Value="nuevoDocumento.TipoDocumento" />
                    </div>

                    <div class="mb-3">
                        <label>Ruta del Archivo:</label>
                        <InputText class="form-control" @bind-Value="nuevoDocumento.RutaArchivo" />
                    </div>

                    <div class="mb-3">
                        <label>Fecha de Entrega:</label>
                        <InputDate class="form-control" @bind-Value="nuevoDocumento.FechaEntrega" />
                    </div>

                </div>
            </div>
        </div>

        <!-- Sección: Historial Académico -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingAcademico">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAcademico">
                    Historial Académico
                </button>
            </h2>
            <div id="collapseAcademico" class="accordion-collapse collapse" data-bs-parent="#formAccordion">
                <div class="accordion-body">

                    <div class="mb-3">
                        <label>Título:</label>
                        <InputText class="form-control" @bind-Value="nuevoAcademico.Titulo" />
                    </div>

                    <div class="mb-3">
                        <label>Grado Académico:</label>
                        <InputText class="form-control" @bind-Value="nuevoAcademico.GradoAcademico" />
                    </div>

                    <div class="mb-3">
                        <label>Institución:</label>
                        <InputText class="form-control" @bind-Value="nuevoAcademico.Institucion" />
                    </div>

                    <div class="mb-3">
                        <label>Fecha de Graduación:</label>
                        <InputDate class="form-control" @bind-Value="nuevoAcademico.FechaGraduacion" />
                    </div>

                </div>
            </div>
        </div>

    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>
</EditForm>

@code {
    private Empleado nuevoEmpleado = new();
    private DocumentoDto nuevoDocumento = new();
    private InformacionAcademicaDto nuevoAcademico = new();

    private List<Cargo> cargos = new();
    private List<Departamento> departamentos = new();

    protected override async Task OnInitializedAsync()
    {
        cargos = await Http.GetFromJsonAsync<List<Cargo>>("api/Cargos");
        departamentos = await Http.GetFromJsonAsync<List<Departamento>>("api/Departamentos");
    }

    private async Task GuardarEmpleado()
    {
        try
        {
            Console.WriteLine("Iniciando GuardarEmpleado");

            var response = await Http.PostAsJsonAsync("api/Empleados", nuevoEmpleado);

            Console.WriteLine($"Response status: {response.StatusCode}");

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error al guardar empleado: {response.StatusCode}");
                return;
            }

            var creado = await response.Content.ReadFromJsonAsync<Empleado>();

            Console.WriteLine($"Empleado creado con Id: {creado?.Id}");

            if (creado != null)
            {
                nuevoDocumento.ID_Empleado = creado.Id;
                var responseDoc = await Http.PostAsJsonAsync("api/DocumentoEmpleado", nuevoDocumento);
                Console.WriteLine($"Response documento status: {responseDoc.StatusCode}");

                nuevoAcademico.ID_Empleado = creado.Id;
                var responseAcad = await Http.PostAsJsonAsync("api/InformacionAcademica", nuevoAcademico);
                Console.WriteLine($"Response academico status: {responseAcad.StatusCode}");
            }

            Navigation.NavigateTo("/empleados");
            Console.WriteLine("Navegando a /empleados");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Excepción al guardar empleado: {ex.Message}");
        }
    }

    private void Cancelar() => Navigation.NavigateTo("/empleados");

    public class Empleado
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "El nombre solo puede contener letras y espacios.")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El DPI es obligatorio.")]
        [RegularExpression(@"^\d{13}$", ErrorMessage = "El DPI debe contener exactamente 13 números.")]
        public string Dpi { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono es obligatorio.")]
        [RegularExpression(@"^\d{8}$", ErrorMessage = "El teléfono debe contener exactamente 8 números.")]
        public string Telefono { get; set; } = string.Empty;

        [Required(ErrorMessage = "El estado laboral es obligatorio.")]
        public string EstadoLaboral { get; set; } = string.Empty;

        [Required(ErrorMessage = "La dirección es obligatoria.")]
        public string Direccion { get; set; } = string.Empty;

        [Required(ErrorMessage = "La fecha de ingreso es obligatoria.")]
        public DateTime FechaIngreso { get; set; } = DateTime.Today;

        public int? Id_Cargo { get; set; }
        public int? Id_Departamento { get; set; }
    }

    public class DocumentoDto
    {
        public int ID_Empleado { get; set; }
        public string? Nombre { get; set; }
        public string TipoDocumento { get; set; } = string.Empty;
        public string RutaArchivo { get; set; } = string.Empty;
        public DateTime? FechaEntrega { get; set; }
    }

    public class InformacionAcademicaDto
    {
        public int ID_Empleado { get; set; }
        public string Titulo { get; set; } = string.Empty;
        public string GradoAcademico { get; set; } = string.Empty;
        public string Institucion { get; set; } = string.Empty;
        public DateTime? FechaGraduacion { get; set; }
    }

    public class Cargo
    {
        public int Id { get; set; }
        public string NombreCargo { get; set; } = string.Empty;
    }

    public class Departamento
    {
        public int Id { get; set; }
        public string NombreDepartamento { get; set; } = string.Empty;
    }
}






