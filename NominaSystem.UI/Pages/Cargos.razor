@page "/cargos"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json

<h3>Cargos</h3>

<button class="btn btn-primary mb-3" @onclick="MostrarAgregar">Agregar Cargo</button>

@if (cargos == null)
{
    <p><em>Cargando cargos...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre Cargo</th>
                <th>Salario Base</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cargo in cargos)
            {
                <tr>
                    <td>@cargo.Id</td>
                    <td>@cargo.NombreCargo</td>
                    <td>@cargo.SalarioBase.ToString("C")</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarCargo(cargo)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarCargo(cargo.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((cargoEdicion.Id == 0) ? "Agregar Cargo" : "Editar Cargo")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm EditContext="editContext" OnValidSubmit="GuardarCargo">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label>Nombre Cargo:</label>
                            <InputText class="form-control" @bind-Value="cargoEdicion.NombreCargo" />
                            <ValidationMessage For="@(() => cargoEdicion.NombreCargo)" />
                        </div>

                        <div class="mb-3">
                            <label>Salario Base:</label>
                            <InputNumber class="form-control" @bind-Value="cargoEdicion.SalarioBase" />
                            <ValidationMessage For="@(() => cargoEdicion.SalarioBase)" />
                        </div>

                        <button type="submit" class="btn btn-success">@((cargoEdicion.Id == 0) ? "Agregar" : "Guardar")</button>
                        <button type="button" class="btn btn-secondary ms-2" @onclick="CerrarModal">Cancelar</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Cargo>? cargos;
    private bool mostrarModal = false;
    private Cargo cargoEdicion = new();

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        await CargarCargos();
    }

    private async Task CargarCargos()
    {
        cargos = await Http.GetFromJsonAsync<List<Cargo>>("api/cargos");
    }

    private void MostrarAgregar()
    {
        cargoEdicion = new Cargo();
        editContext = new EditContext(cargoEdicion);
        messageStore = new ValidationMessageStore(editContext);
        mostrarModal = true;
    }

    private void EditarCargo(Cargo cargo)
    {
        cargoEdicion = new Cargo
            {
                Id = cargo.Id,
                NombreCargo = cargo.NombreCargo,
                SalarioBase = cargo.SalarioBase
            };
        editContext = new EditContext(cargoEdicion);
        messageStore = new ValidationMessageStore(editContext);
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }

    private async Task GuardarCargo()
    {
        if (editContext == null || messageStore == null)
            return;

        messageStore.Clear();
        editContext.NotifyValidationStateChanged();

        HttpResponseMessage response;

        if (cargoEdicion.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/cargos", cargoEdicion);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/cargos/{cargoEdicion.Id}", cargoEdicion);
        }

        if (response.IsSuccessStatusCode)
        {
            await CargarCargos();
            mostrarModal = false;
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var content = await response.Content.ReadAsStringAsync();

            try
            {
                using var doc = JsonDocument.Parse(content);
                if (doc.RootElement.TryGetProperty("errors", out var errorsElement))
                {
                    foreach (var property in errorsElement.EnumerateObject())
                    {
                        var field = new FieldIdentifier(cargoEdicion, property.Name);
                        var messages = property.Value.EnumerateArray().Select(e => e.GetString() ?? "").ToArray();
                        messageStore.Add(field, messages);
                    }
                    editContext.NotifyValidationStateChanged();
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine("❌ Error al interpretar errores:");
                Console.WriteLine(ex.Message);
                Console.WriteLine(content);
            }
        }
        else
        {
            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine("❌ Error inesperado:");
            Console.WriteLine(content);
        }
    }

    private async Task EliminarCargo(int id)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirmarEliminacionCargo");
        if (!confirmado) return;

        var response = await Http.DeleteAsync($"api/cargos/{id}");
        if (response.IsSuccessStatusCode)
        {
            await CargarCargos();
            await JS.InvokeVoidAsync("mostrarAlertaExito", "Cargo eliminado correctamente.");
        }
        else if ((int)response.StatusCode == 400)
        {
            await JS.InvokeVoidAsync("Swal.fire", "No permitido", "No se puede eliminar este cargo porque está asignado a uno o más empleados.", "warning");
        }
        else
        {
            await JS.InvokeVoidAsync("Swal.fire", "Error", "Error al eliminar cargo", "error");
        }
    }

    public class Cargo
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "El nombre del cargo es obligatorio")]
        public string NombreCargo { get; set; } = string.Empty;

        [Required(ErrorMessage = "El salario base es obligatorio")]
        [Range(0.01, double.MaxValue, ErrorMessage = "El salario base debe ser mayor a 0")]
        public decimal SalarioBase { get; set; }
    }
}

