@page "/empleados"
@inject HttpClient Http
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Empleados</h3>

@if (empleados == null)
{
    <p><em>Cargando empleados...</em></p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="AgregarEmpleado">Agregar Empleado</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>DPI</th>
                <th>Teléfono</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in empleados)
            {
                <tr>
                    <td>@emp.Nombre</td>
                    <td>@emp.Dpi</td>
                    <td>@emp.Telefono</td>
                    <td>@emp.EstadoLaboral</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="@(() => EditarEmpleado(emp.Id))">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarEmpleado(emp.Id))">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Empleado>? empleados;

    protected override async Task OnInitializedAsync()
    {
        // Delay mínimo para evitar error por prerenderizado
        await Task.Delay(1);

        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine("❌ Token no encontrado");
            Navigation.NavigateTo("/login", true);
            return;
        }

        Console.WriteLine("✅ Token encontrado: " + token);
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        try
        {
            empleados = await Http.GetFromJsonAsync<List<Empleado>>("api/Empleados");
            Console.WriteLine("✅ Empleados cargados correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Error al obtener empleados: " + ex.Message);
        }
    }

    private void AgregarEmpleado() => Navigation.NavigateTo("/empleados/agregar");
    private void EditarEmpleado(int id) => Navigation.NavigateTo($"/empleados/editar/{id}");

    private async Task EliminarEmpleado(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar al empleado con ID {id}?");
        if (!confirmar) return;

        var response = await Http.DeleteAsync($"api/Empleados/{id}");
        if (response.IsSuccessStatusCode)
        {
            empleados = await Http.GetFromJsonAsync<List<Empleado>>("api/Empleados");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"❌ Error al eliminar empleado: {response.StatusCode}");
        }
    }

    public class Empleado
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = "";
        public string Dpi { get; set; } = "";
        public string Telefono { get; set; } = "";
        public string EstadoLaboral { get; set; } = "";
    }
}
