@page "/nominas/agregar"
@using NominaSystem.UI.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<h3>Agregar Nómina</h3>

<EditForm Model="nuevaNomina" OnValidSubmit="GuardarNomina">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Selección de Empleado -->
    <div class="mb-3">
        <label>Empleado:</label>
        <InputSelect class="form-control" @bind-Value="nuevaNomina.ID_Empleado" @onchange="ObtenerSalarioBase">
            <option value="">-- Seleccione Empleado --</option>
            @foreach (var e in empleados)
            {
                <option value="@e.Id">@e.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => nuevaNomina.ID_Empleado)" class="text-danger" />
    </div>
       
    <div class="mb-3">
        <label>Periodo Inicio:</label>
        <InputDate class="form-control" @bind-Value="nuevaNomina.PeriodoInicio" />
        <ValidationMessage For="@(() => nuevaNomina.PeriodoInicio)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label>Periodo Fin:</label>
        <InputDate class="form-control" @bind-Value="nuevaNomina.PeriodoFin" />
        <ValidationMessage For="@(() => nuevaNomina.PeriodoFin)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label>Horas Extras:</label>
        <InputNumber class="form-control" @bind-Value="nuevaNomina.HorasExtras" />
        <ValidationMessage For="@(() => nuevaNomina.HorasExtras)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label>Bonificaciones:</label>
        <InputNumber class="form-control" @bind-Value="nuevaNomina.Bonificaciones" />
        <ValidationMessage For="@(() => nuevaNomina.Bonificaciones)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label>Descuentos:</label>
        <InputNumber class="form-control" @bind-Value="nuevaNomina.Descuentos" />
        <ValidationMessage For="@(() => nuevaNomina.Descuentos)" class="text-danger" />
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>
</EditForm>

@code {
    private NominaDto nuevaNomina = new();
    private List<EmpleadoDto> empleados = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                empleados = await Http.GetFromJsonAsync<List<EmpleadoDto>>("api/Empleados");
            }
            else
            {
                Console.WriteLine("Token no encontrado en LocalStorage");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar empleados: {ex.Message}");
        }
    }

    private async Task ObtenerSalarioBase()
    {
        Console.WriteLine("Entró en ObtenerSalarioBase");  // Log de depuración
        if (nuevaNomina.ID_Empleado != 0)
        {
            try
            {
                // Log para verificar que la solicitud se hace correctamente
                Console.WriteLine($"Llamando a la API para obtener el salario base del empleado con ID: {nuevaNomina.ID_Empleado}");

                var response = await Http.GetAsync($"api/nomina/empleado/{nuevaNomina.ID_Empleado}/salario");

                if (response.IsSuccessStatusCode)
                {
                    var salarioBase = await response.Content.ReadFromJsonAsync<decimal>();

                    // Log para verificar que el salario base es recibido
                    Console.WriteLine($"Salario Base obtenido: {salarioBase}");

                    // Asigna el salario base a la propiedad correspondiente
                    nuevaNomina.SalarioBase = salarioBase;

                    // Asegúrate de que Blazor actualice la vista
                    StateHasChanged();  // Esto es importante para forzar la actualización de la vista
                }
                else
                {
                    Console.WriteLine($"Error al obtener salario base. Código de estado: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener salario base: {ex.Message}");
            }
        }
    }


    private async Task GuardarNomina()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Nomina", nuevaNomina);
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error al guardar nómina: {response.StatusCode}");
                return;
            }
            Navigation.NavigateTo("/nominas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Excepción al guardar nómina: {ex.Message}");
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/nominas");
    }
}






