@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using NominaSystem.UI.Models
@using NominaSystem.UI.Services.Interfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<h3>Iniciar sesión</h3>
<EditForm Model="@loginModel" OnSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Usuario</label>
        <InputText class="form-control" @bind-Value="loginModel.UsuarioNombre" />
    </div>
    <div class="mb-3">
        <label>Contraseña</label>
        <InputText type="password" class="form-control" @bind-Value="loginModel.Contrasena" />
    </div>

    <button type="submit" class="btn btn-primary">Ingresar</button>
    <div class="mt-3">
        ¿No tienes cuenta?
        <a href="registro" class="link-primary">Regístrate aquí</a>
    </div>


    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
</EditForm>

@code {
    private LoginRequest loginModel = new();
    private string? error;

    private async Task HandleLogin()
    {
        try
        {
            var token = await AuthService.LoginAsync(loginModel.UsuarioNombre, loginModel.Contrasena);

            if (!string.IsNullOrEmpty(token))
            {
                error = null;

                // Guardar el token de forma segura
                await LocalStorage.SetItemAsync("authToken", token);


                Navigation.NavigateTo("/empleados");
            }
            else
            {
                error = "Credenciales inválidas";
            }
        }
        catch (Exception ex)
        {

            error = "Error inesperado: " + ex.Message;
            Console.WriteLine("❌ Excepción: " + ex.ToString());
        }
    }
}


