@page "/empleados/editar/{id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json

<h3>Editar Empleado</h3>

@if (cargando)
{
    <p>Cargando empleado...</p>
}
else
{
    <EditForm Model="empleado" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator />

        <div class="accordion" id="editarEmpleadoAccordion">

            <!-- Sección: Datos Generales -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingGenerales">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGenerales" aria-expanded="true" aria-controls="collapseGenerales">
                        Datos Generales
                    </button>
                </h2>
                <div id="collapseGenerales" class="accordion-collapse collapse show" aria-labelledby="headingGenerales" data-bs-parent="#editarEmpleadoAccordion">
                    <div class="accordion-body">

                        <div class="mb-3">
                            <label>Nombre:</label>
                            <InputText class="form-control" @bind-Value="empleado.Nombre" />
                            <ValidationMessage For="@(() => empleado.Nombre)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>DPI:</label>
                            <InputText class="form-control" @bind-Value="empleado.Dpi" />
                            <ValidationMessage For="@(() => empleado.Dpi)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>Teléfono:</label>
                            <InputText class="form-control" @bind-Value="empleado.Telefono" />
                            <ValidationMessage For="@(() => empleado.Telefono)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>Estado Laboral:</label>
                            <InputSelect class="form-control" @bind-Value="empleado.EstadoLaboral">
                                <option value="">-- Seleccionar --</option>
                                <option value="Activo">Activo</option>
                                <option value="Inactivo">Inactivo</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => empleado.EstadoLaboral)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>Dirección:</label>
                            <InputText class="form-control" @bind-Value="empleado.Direccion" />
                            <ValidationMessage For="@(() => empleado.Direccion)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>Fecha Ingreso:</label>
                            <InputDate class="form-control" @bind-Value="empleado.FechaIngreso" />
                            <ValidationMessage For="@(() => empleado.FechaIngreso)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>Cargo:</label>
                            <InputSelect class="form-control" @bind-Value="empleado.Id_Cargo">
                                <option value="">-- Seleccione Cargo --</option>
                                @foreach (var c in cargos)
                                {
                                    <option value="@c.Id">@c.NombreCargo</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label>Departamento:</label>
                            <InputSelect class="form-control" @bind-Value="empleado.Id_Departamento">
                                <option value="">-- Seleccione Departamento --</option>
                                @foreach (var d in departamentos)
                                {
                                    <option value="@d.Id">@d.NombreDepartamento</option>
                                }
                            </InputSelect>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Sección: Documentos -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingDocumentos">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDocumentos" aria-expanded="false" aria-controls="collapseDocumentos">
                        Documentos
                    </button>
                </h2>
                <div id="collapseDocumentos" class="accordion-collapse collapse" aria-labelledby="headingDocumentos" data-bs-parent="#editarEmpleadoAccordion">
                    <div class="accordion-body">

                        <div class="mb-3">
                            <label>Nombre del Documento</label>
                            <InputText class="form-control" @bind-Value="documento.Nombre" />
                            <ValidationMessage For="@(() => documento.Nombre)" class="text-danger" />
                            </div>

                        <div class="mb-3">
                            <label>Tipo Documento:</label>
                            <InputSelect class="form-control" @bind-Value="documento.TipoDocumento">
                                <option value="">-- Seleccione Tipo de Documento --</option>
                                <option value="Contrato Firmado">Contrato Firmado</option>
                                <option value="Certificado de Estudio">Certificado de Estudio</option>
                                <option value="DPI">DPI</option>
                                <option value="Antecendentes Penales/Policiales">Antecendentes Penales/Policiales</option>
                                <option value="Constancia De Trabajo">Constancia De Trabajo</option>
                                <option value="Carta De Recomendacion">Carta De Recomendacion</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => documento.TipoDocumento)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label>Archivo PDF:</label>
                            <InputFile OnChange="OnInputFileChange" accept=".pdf" />
                            @if (!string.IsNullOrEmpty(documento.RutaArchivo))
                            {
                                <div class="mt-2 text-success">Archivo cargado: @Path.GetFileName(documento.RutaArchivo)</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label>Fecha de Entrega:</label>
                            <InputDate class="form-control" @bind-Value="documento.FechaEntrega" />
                        </div>


                        <div class="mb-3">
                            <label>Fecha de Entrega:</label>
                            <InputDate class="form-control" @bind-Value="documento.FechaEntrega" />
                        </div>

                    </div>
                </div>
            </div>

            <!-- Sección: Historial Académico -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingAcademico">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAcademico" aria-expanded="false" aria-controls="collapseAcademico">
                        Historial Académico
                    </button>
                </h2>
                <div id="collapseAcademico" class="accordion-collapse collapse" aria-labelledby="headingAcademico" data-bs-parent="#editarEmpleadoAccordion">
                    <div class="accordion-body">

                        <div class="mb-3">
                            <label>Título:</label>
                            <InputText class="form-control" @bind-Value="academico.Titulo" />
                        </div>

                        <div class="mb-3">
                            <label>Institución:</label>
                            <InputText class="form-control" @bind-Value="academico.Institucion" />
                        </div>

                        <div class="mb-3">
                            <label>Grado Académico:</label>
                            <InputText class="form-control" @bind-Value="academico.GradoAcademico" />
                        </div>

                        <div class="mb-3">
                            <label>Fecha de Graduación:</label>
                            <InputDate class="form-control" @bind-Value="academico.FechaGraduacion" />
                        </div>

                    </div>
                </div>
            </div>

        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-success">Guardar Cambios</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </EditForm>

}

@code {
    [Inject] IWebHostEnvironment Environment { get; set; } = default!;
    [Parameter] public int id { get; set; }

    private Empleado empleado = new();
    private DocumentoDto documento = new();
    private InformacionAcademicaDto academico = new();
    private List<Cargo> cargos = new();
    private List<Departamento> departamentos = new();
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        cargos = await Http.GetFromJsonAsync<List<Cargo>>("api/Cargos");
        departamentos = await Http.GetFromJsonAsync<List<Departamento>>("api/Departamentos");

        empleado = await Http.GetFromJsonAsync<Empleado>($"api/Empleados/{id}") ?? new Empleado();

        var docs = await Http.GetFromJsonAsync<List<DocumentoDto>>($"api/DocumentoEmpleado/por-empleado/{id}");
        documento = docs?.FirstOrDefault() ?? new DocumentoDto { ID_Empleado = id };

        var acad = await Http.GetFromJsonAsync<List<InformacionAcademicaDto>>($"api/InformacionAcademica/por-empleado/{id}");
        academico = acad?.FirstOrDefault(a => a.ID_Empleado == id) ?? new InformacionAcademicaDto { ID_Empleado = id };

        cargando = false;
    }

    private async Task GuardarCambios()
    {
        try
        {
            var responseEmpleado = await Http.PutAsJsonAsync($"api/Empleados/{empleado.Id}", empleado);

            if (documento.Id > 0)
                await Http.PutAsJsonAsync($"api/DocumentoEmpleado/{documento.Id}", documento);
            else
                await Http.PostAsJsonAsync("api/DocumentoEmpleado", documento);

            if (academico.Id > 0)
                await Http.PutAsJsonAsync($"api/InformacionAcademica/{academico.Id}", academico);
            else
                await Http.PostAsJsonAsync("api/InformacionAcademica", academico);

            Navigation.NavigateTo("/empleados");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar: {ex.Message}");
            Navigation.NavigateTo("/empleados");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var uploads = Path.Combine(Environment.WebRootPath, "documentos");
                if (!Directory.Exists(uploads))
                    Directory.CreateDirectory(uploads);

                var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
                var filePath = Path.Combine(uploads, uniqueFileName);

                await using FileStream fs = new(filePath, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(fs);

                documento.RutaArchivo = $"documentos/{uniqueFileName}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al subir archivo: " + ex.Message);
        }
    }

    private void Cancelar() => Navigation.NavigateTo("/empleados");

    public class Empleado
    {
        public int Id { get; set; }
        [Required, RegularExpression(@"^[a-zA-Z\s]+$", ErrorMessage = "Solo letras y espacios.")]
        public string Nombre { get; set; } = string.Empty;

        [Required, RegularExpression(@"^\d{13}$", ErrorMessage = "Debe contener 13 dígitos.")]
        public string Dpi { get; set; } = string.Empty;

        [Required, RegularExpression(@"^\d{8}$", ErrorMessage = "Debe contener 8 dígitos.")]
        public string Telefono { get; set; } = string.Empty;

        [Required]
        public string EstadoLaboral { get; set; } = string.Empty;
        [Required]
        public string Direccion { get; set; } = string.Empty;
        [Required]
        public DateTime FechaIngreso { get; set; } = DateTime.Today;

        public int? Id_Cargo { get; set; }
        public int? Id_Departamento { get; set; }
    }

    public class DocumentoDto
    {
        public int Id { get; set; }
        public int ID_Empleado { get; set; }
        public string TipoDocumento { get; set; } = string.Empty;
        public string? Nombre { get; set; } = string.Empty;
        public string RutaArchivo { get; set; } = string.Empty;
        public DateTime? FechaEntrega { get; set; }
    }

    public class InformacionAcademicaDto
    {
        public int Id { get; set; }
        public int ID_Empleado { get; set; }
        public string Titulo { get; set; } = string.Empty;
        public string Institucion { get; set; } = string.Empty;
        public string GradoAcademico { get; set; } = string.Empty;
        public DateTime? FechaGraduacion { get; set; }
    }

    public class Cargo
    {
        public int Id { get; set; }
        public string NombreCargo { get; set; } = string.Empty;
    }

    public class Departamento
    {
        public int Id { get; set; }
        public string NombreDepartamento { get; set; } = string.Empty;
    }
}




